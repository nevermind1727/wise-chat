generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  conversations ConversationParticipant[]
  messages      Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id            String    @id @default(cuid())
  participants  ConversationParticipant[]
  messages      Message[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastSentMessage Message? @relation(name: "lastConversationMessage", fields: [lastSentMessageId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  lastSentMessageId String? @unique()
}

model ConversationParticipant {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String      
  conversation  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  hasSeenLatestMessage Boolean?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Message {
  id            String   @id @default(cuid())
  converstion   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender        User @relation(fields: [senderId], references: [id])
  senderId      String
  body          String @db.Text
  isLatestIn    Conversation? @relation(name: "lastConversationMessage")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
